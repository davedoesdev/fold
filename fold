#!/bin/bash
set -e

BRIDGE=weave
WEAVE_CONTAINER_NAME=weave
WEAVE_HTTP_PORT=6784
NFDHCPD_CFG="${NFDHCPD_CFG:-/etc/nfdhcpd/nfdhcpd.conf}"
MTU=16384 # max TAP MTU
let "MARK_GATEWAY=1<<0"
let "MARK_GATEWAY6=1<<1"
UTILS="$(dirname "$0")/utils"

usage() {
    echo "Usage:"
    echo "fold -i <iface-name> -4 auto [net:<cidr> | net:default]"
    echo "fold -i <iface-name> -4 release"
    echo "fold [-i <iface-name>]"
    echo "     [-4 <ipaddr>/<subnet>] [-6 <ip6prefix>] [-m <multicast-addr>]..."
    echo "     [-k <rdiscd-keyfile>] [-d <rdiscd-img-dir>]"
    echo "     [-b <nfdhcpd-binding-file>]"
    echo "     [-a <iptables-gw-action>] [-A <ip6tables-gw-action>]"
    echo "     <macaddr> kvm|capstan [<hypervisor arg>...]"
    exit 1
}

[ "$(id -u)" = 0 ] || {
    echo "fold must be run as 'root'" >&2
    exit 1
}

unset IPSUB PREFIX KEYFILE RDISCD_IMG_FILE TAP_IFNAME
RDISCD_IMG_DIR=.
MULTI4=()
MULTI6=()
NFDHCPD_BINDING_IN=/dev/null
GATEWAY_ACTION="-j RETURN"
GATEWAY6_ACTION="-j RETURN"
while getopts 4:6:m:k:d:b:i:a:A: opt
do
    case $opt in
        4)
            IPSUB="$OPTARG"
            ;;
        6)
            PREFIX="$OPTARG"
            ;;
        m)
            if [[ "$OPTARG" == *.* ]]; then
                MULTI4=("${MULTI4[@]}" "$OPTARG")
            else
                MULTI6=("${MULTI6[@]}" "$OPTARG")
            fi
            ;;
        k)
            KEYFILE="$OPTARG"
            ;;
        d)
            RDISCD_IMG_DIR="$OPTARG"
            ;;
        b)
            NFDHCPD_BINDING_IN="$OPTARG"
            ;;
        i)
            TAP_IFNAME="$OPTARG"
            ;;
        a)
            GATEWAY_ACTION="$OPTARG"
            ;;
        A)
            GATEWAY6_ACTION="$OPTARG"
            ;;
        *)
            usage
            ;;
    esac
done

shift $((OPTIND-1))

# IPAM functions taken from weave script

IP_REGEXP="[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
CIDR_REGEXP="$IP_REGEXP/[0-9]{1,2}"

is_cidr() {
    echo "$1" | grep -E "^$CIDR_REGEXP$" >/dev/null
}

container_ip() {
    if ! status=$(docker inspect --format='{{.State.Running}} {{.NetworkSettings.IPAddress}}' $1 2>/dev/null) ; then
        echo "$2" >&2
        return 1
    fi
    case "$status" in
        "true ")
            echo "$1 container has no IP address; is Docker networking enabled?" >&2
            return 1
            ;;
        true*)
            CONTAINER_IP="${status#true }"
            ;;
        *)
            echo "$3" >&2
            return 1
            ;;
    esac
}

http_call_ip() {
    ip="$1"
    port="$2"
    http_verb="$3"
    url="$4"
    shift 4
    curl --connect-timeout 3 -s -S -X $http_verb "$@" http://$ip:$port$url
}

# Call url $4 with http verb $3 on container $1 at port $2
http_call() {
    HTTP_CALL_CONTAINER=$1
    container_ip $HTTP_CALL_CONTAINER \
        "$HTTP_CALL_CONTAINER container is not present. Have you launched it?" \
        "$HTTP_CALL_CONTAINER container is not running." \
        || return 1
    shift 1
    if ! http_call_ip $CONTAINER_IP "$@" ; then
        echo "Call to $HTTP_CALL_CONTAINER failed." >&2
        return 1
    fi
}

if [ "$IPSUB" = auto ]; then
    [ -n "$TAP_IFNAME" -a $# -le 1 ] || usage
    if [ $# -eq 0 -o "$1" = net:default ]; then
        IPAM_URL="/ip/$TAP_IFNAME"
    else
        IPAM_URL="/ip/$TAP_IFNAME/${1#net:}"
    fi
    if ! CIDR="$(http_call $WEAVE_CONTAINER_NAME $WEAVE_HTTP_PORT POST "$IPAM_URL")"; then
        exit 1
    fi
    if [ "$CIDR" = "404 page not found" ] ; then
        echo "IP address allocation must be enabled to use 'net:'" >&2
        exit 1
    fi
    if ! is_cidr "$CIDR" ; then
        echo "$CIDR" >&2
        exit 1
    fi
    echo "$CIDR"
    exit
fi

if [ "$IPSUB" = release ]; then
    [ -n "$TAP_IFNAME" -a $# -eq 0 ] || usage
    http_call $WEAVE_CONTAINER_NAME $WEAVE_HTTP_PORT DELETE "/ip/$TAP_IFNAME"
    exit
fi

TAP_IFNAME="${TAP_IFNAME:-vethfotp$$}"
NFDHCPD_BINDING_OUT="/var/lib/nfdhcpd/$TAP_IFNAME"

[ $# -gt 1 ] || usage

MACADDR="$1"
COMMAND="$2"
shift 2

trim() {
    sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' "$@"
}

config() {
    grep -i "^$1 *=" $2 | sed 's/^[^=]*=//' | sed 's/#.*$//' | trim
}

config1() {
    config "$1" "$2" | sed 's/,.*$//' | trim
}

run_prog() {
    local user="${SUDO_USER:-root}"
    if command -v sudo >& /dev/null; then
        sudo -u "$user" "$@"
    else
        su --preserve-environment -l -c 'exec "$0" "$@"' "$user" -- "$@"
    fi
}

DHCP_QUEUE="$(config dhcp_queue "$NFDHCPD_CFG")"
RS_QUEUE="$(config rs_queue "$NFDHCPD_CFG")"
NS_QUEUE="$(config ns_queue "$NFDHCPD_CFG")"
DNS_QUEUE="$(config dns_queue "$NFDHCPD_CFG")"
DNS6_QUEUE="$(config dns6_queue "$NFDHCPD_CFG")"
NOTIFY_QUEUE="$(config notify_queue "$NFDHCPD_CFG")"
NOTIFY6_QUEUE="$(config notify6_queue "$NFDHCPD_CFG")"
NAMESERVER="$(config1 nameservers "$NFDHCPD_BINDING_IN")"
GATEWAY="$(config gateway "$NFDHCPD_BINDING_IN")"
GATEWAY_MAC="$(config gateway_mac "$NFDHCPD_BINDING_IN")"
GATEWAY6="$(config gateway6 "$NFDHCPD_BINDING_IN")"
GATEWAY6_MAC="$(config gateway6_mac "$NFDHCPD_BINDING_IN")"

if [ "$IPSUB" ]; then
    # extract the IP address from an ipaddr/subnet spec
    IFS=/ read -a ipsub <<< "$IPSUB"
    IPADDR="${ipsub[0]}"

    # make a zero-ending subnet mask (CIDR) from an ipaddr/subnet spec
    IFS=. read -a ipaddr <<< "$IPADDR"
    ipnum=$(((ipaddr[0] << 24) + (ipaddr[1] << 16) + (ipaddr[2] << 8) + (ipaddr[3])))
    ipnum=$((ipnum & ~(2 ** (32 - ipsub[1]) - 1)))
    SUBNET=$((ipnum >> 24 & 255)).$((ipnum >> 16 & 255)).$((ipnum >> 8 & 255)).$((ipnum & 255))/${ipsub[1]}
fi

if [ "$PREFIX" ]; then
    if [ "$KEYFILE" ]; then
        # For RFC-7217 (stable privacy addresses), support rdiscd.
        # We generate an address using rdiscd-mkaddress here and write it into
        # a disk image which we attach to the VM. rdiscd can then pick this up
        # in the guest. We could generate a random address here but it's nice
        # to be able to know which IPv6 address relates to a MAC address.
        IP6ADDR="$(rdiscd-mkaddress -m "$MACADDR" -k "$KEYFILE" "$PREFIX" stable-privacy)"
        RDISCD_IMG_FILE="$RDISCD_IMG_DIR/rdiscd_$TAP_IFNAME.img"
        run_prog genext2fs -b 1440 "$RDISCD_IMG_FILE"
        echo "::$("$UTILS/exp6" "$IP6ADDR" 16 8)" | run_prog e2cp -P 400 - "$RDISCD_IMG_FILE:interface-id"
        echo 64 | run_prog e2cp -P 400 - "$RDISCD_IMG_FILE:interface-id-len"
    else
        # Assume guest uses EUI-64.
        IP6ADDR="$("$UTILS/exp6" "$PREFIX" 8):$("$UTILS/eui-64" "$MACADDR")"
    fi
    # RFC-4941 (privacy extensions) aren't supported since we'd have no way
    # to tell nfdhcpd what to use when rewriting neighbour advertisement source
    # addresses. Also, allowing any VM to send/receive packets on any address
    # isn't desirable - we want to know a VM is only sending traffic on its
    # expected address (i.e. it's not impersonating another VM).
fi

unrule() {
    if iptables -t mangle -L "in$TAP_IFNAME" >& /dev/null; then
        iptables -t mangle -D PREROUTING -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        iptables -t mangle -F "in$TAP_IFNAME"
        iptables -t mangle -X "in$TAP_IFNAME"
    fi
    if iptables -t mangle -L "out$TAP_IFNAME" >& /dev/null; then
        iptables -t mangle -D FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        iptables -t mangle -F "out$TAP_IFNAME"
        iptables -t mangle -X "out$TAP_IFNAME"
    fi
    if iptables -L "in$TAP_IFNAME" >& /dev/null; then
        iptables -D FORWARD -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        iptables -D INPUT -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        iptables -F "in$TAP_IFNAME"
        iptables -X "in$TAP_IFNAME"
    fi
    if iptables -L "out$TAP_IFNAME" >& /dev/null; then
        iptables -D FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        iptables -D FORWARD -o "$BRIDGE" -d "$IPADDR" -j "out$TAP_IFNAME"
        iptables -D OUTPUT -o "$BRIDGE" -d "$IPADDR" -j "out$TAP_IFNAME"
        iptables -F "out$TAP_IFNAME"
        iptables -X "out$TAP_IFNAME"
    fi
    if ip6tables -t mangle -L "in$TAP_IFNAME" >& /dev/null; then
        ip6tables -t mangle -D PREROUTING -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ip6tables -t mangle -F "in$TAP_IFNAME"
        ip6tables -t mangle -X "in$TAP_IFNAME"
    fi
    if ip6tables -t mangle -L "out$TAP_IFNAME" >& /dev/null; then
        ip6tables -t mangle -D FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        ip6tables -t mangle -F "out$TAP_IFNAME"
        ip6tables -t mangle -X "out$TAP_IFNAME"
    fi
    if ip6tables -L "in$TAP_IFNAME" >& /dev/null; then
        ip6tables -D INPUT -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ip6tables -D FORWARD -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ip6tables -F "in$TAP_IFNAME"
        ip6tables -X "in$TAP_IFNAME"
    fi
    if ip6tables -L "out$TAP_IFNAME" >& /dev/null; then
        ip6tables -D FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        ip6tables -D FORWARD -o "$BRIDGE" -d "$IP6ADDR" -j "out$TAP_IFNAME"
        ip6tables -D OUTPUT -o "$BRIDGE" -d "$IP6ADDR" -j "out$TAP_IFNAME"
        ip6tables -F "out$TAP_IFNAME"
        ip6tables -X "out$TAP_IFNAME"
    fi
    if ebtables -t nat -L "in$TAP_IFNAME" >& /dev/null; then
        ebtables -t nat -D PREROUTING -i "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ebtables -t nat -F "in$TAP_IFNAME"
        ebtables -t nat -X "in$TAP_IFNAME"
    fi
    #ebtables -D FORWARD --log >& /dev/null || true
    if ebtables -L "in$TAP_IFNAME" >& /dev/null; then
        ebtables -D FORWARD -i "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ebtables -F "in$TAP_IFNAME"
        ebtables -X "in$TAP_IFNAME"
    fi
    if ebtables -L "out$TAP_IFNAME" >& /dev/null; then
        ebtables -D FORWARD -o "$TAP_IFNAME" -j "out$TAP_IFNAME"
        ebtables -F "out$TAP_IFNAME"
        ebtables -X "out$TAP_IFNAME"
    fi
}

rule() {
    ebtables -t nat -N "in$TAP_IFNAME" -P RETURN
    ebtables -t nat -I PREROUTING -i "$TAP_IFNAME" -j "in$TAP_IFNAME"

    if [ "$IPSUB" ]; then
        iptables -t mangle -N "in$TAP_IFNAME"
        iptables -t mangle -I PREROUTING -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        iptables -t mangle -A "in$TAP_IFNAME" -p udp --dport bootps -j NFQUEUE --queue-num "$DHCP_QUEUE"
        iptables -t mangle -A "in$TAP_IFNAME" -p udp --dport domain -j NFQUEUE --queue-num "$DNS_QUEUE"

        iptables -t mangle -N "out$TAP_IFNAME"
        iptables -t mangle -I FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        iptables -t mangle -A "out$TAP_IFNAME" -p udp --dport domain -j NFQUEUE --queue-num "$DNS_QUEUE"

        #iptables -t mangle -L

        iptables -N "in$TAP_IFNAME"
        iptables -I FORWARD -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        iptables -I INPUT -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        if [ "$GATEWAY_MAC" ]; then
            iptables -A "in$TAP_IFNAME" -s "$IPADDR" -m mark --mark "$MARK_GATEWAY/$MARK_GATEWAY" $GATEWAY_ACTION
        fi
        iptables -A "in$TAP_IFNAME" -s "$IPADDR" -d "$SUBNET" -j RETURN
        for addr in "${MULTI4[@]}"; do
            iptables -A "in$TAP_IFNAME" -s "$IPADDR" -d "$addr" -j RETURN
        done
        iptables -A "in$TAP_IFNAME" -j REJECT

        iptables -N "out$TAP_IFNAME"
        iptables -I FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        iptables -I FORWARD -o "$BRIDGE" -d "$IPADDR" -j "out$TAP_IFNAME"
        iptables -I OUTPUT -o "$BRIDGE" -d "$IPADDR" -j "out$TAP_IFNAME"
        if [ "$GATEWAY" ]; then
            iptables -A "out$TAP_IFNAME" ! -s "$SUBNET" -d "$IPADDR" $GATEWAY_ACTION
            iptables -A "out$TAP_IFNAME" -s "$GATEWAY" -d "$IPADDR" $GATEWAY_ACTION
        fi
        iptables -A "out$TAP_IFNAME" -s "$SUBNET" -d "$IPADDR" -j RETURN
        for addr in "${MULTI4[@]}"; do
            iptables -A "out$TAP_IFNAME" -s "$SUBNET" -d "$addr" -j RETURN
        done
        iptables -A "out$TAP_IFNAME" -j REJECT
        #iptables -L

        if [ "$NAMESERVER" ]; then
            ebtables -t nat -A "in$TAP_IFNAME" -p arp --arp-opcode request --arp-ip-dst "$NAMESERVER" -j arpreply --arpreply-mac "$MACADDR"
        fi
        if [ "$GATEWAY_MAC" ]; then
            ebtables -t nat -A "in$TAP_IFNAME" -d "$GATEWAY_MAC" -j mark --mark-or "$MARK_GATEWAY" --mark-target CONTINUE
        fi
        #ebtables -t nat -L
    fi

    if [ "$PREFIX" ]; then
        ip6tables -t mangle -N "in$TAP_IFNAME"
        ip6tables -t mangle -I PREROUTING -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ip6tables -t mangle -A "in$TAP_IFNAME" -p udp --dport domain -j NFQUEUE --queue-num "$DNS6_QUEUE"
        ip6tables -t mangle -A "in$TAP_IFNAME" -p ipv6-icmp --icmpv6-type router-solicitation -j NFQUEUE --queue-num "$RS_QUEUE"
        ip6tables -t mangle -A "in$TAP_IFNAME" -p ipv6-icmp --icmpv6-type neighbour-solicitation -j NFQUEUE --queue-num "$NS_QUEUE"

        ip6tables -t mangle -N "out$TAP_IFNAME"
        ip6tables -t mangle -I FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        ip6tables -t mangle -A "out$TAP_IFNAME" -p udp --dport domain -j NFQUEUE --queue-num "$DNS6_QUEUE"

        #ip6tables -t mangle -L

        ip6tables -N "in$TAP_IFNAME"
        ip6tables -I FORWARD -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        ip6tables -I INPUT -m physdev --physdev-in "$TAP_IFNAME" -j "in$TAP_IFNAME"
        if [ "$GATEWAY6_MAC" ]; then
            ip6tables -A "in$TAP_IFNAME" -s "$IP6ADDR" -m mark --mark "$MARK_GATEWAY6/$MARK_GATEWAY6" $GATEWAY6_ACTION
        fi
        ip6tables -A "in$TAP_IFNAME" -s "$IP6ADDR" -d "$PREFIX" -j RETURN
        for addr in "${MULTI6[@]}"; do
            ip6tables -A "in$TAP_IFNAME" -s "$IP6ADDR" -d "$addr" -j RETURN
        done
        # Allow packets to solicited-node multicast addresses (for neighbour
        # solicitations). nfdhcpd checks if the request is for the allocated
        # prefix (and only intercepts if it's not). nfdhcp also sets the source
        # address to the non-link local address.
        # Note that we expect neighbour advertisements to have non-link local
        # source and destination.
        ip6tables -A "in$TAP_IFNAME" -s "$IP6ADDR" -d ff02:0:0:0:0:1:ff00::/104 -p ipv6-icmp --icmpv6-type neighbour-solicitation -j RETURN
        ip6tables -A "in$TAP_IFNAME" -j REJECT

        ip6tables -N "out$TAP_IFNAME"
        ip6tables -I FORWARD -m physdev --physdev-is-bridged --physdev-out "$TAP_IFNAME" -j "out$TAP_IFNAME"
        ip6tables -I FORWARD -o "$BRIDGE" -d "$IP6ADDR" -j "out$TAP_IFNAME"
        ip6tables -I OUTPUT -o "$BRIDGE" -d "$IP6ADDR" -j "out$TAP_IFNAME"
        if [ "$GATEWAY6_MAC" ]; then
            ip6tables -A "out$TAP_IFNAME" ! -s "$PREFIX" -d "$IP6ADDR" $GATEWAY6_ACTION
            ip6tables -A "out$TAP_IFNAME" -s "$GATEWAY" -d "$IP6ADDR" $GATEWAY6_ACTION
        fi
        ip6tables -A "out$TAP_IFNAME" -s "$PREFIX" -d "$IP6ADDR" -j RETURN
        for addr in "${MULTI6[@]}"; do
            ip6tables -A "out$TAP_IFNAME" -s "$PREFIX" -d "$addr" -j RETURN
        done
        # Allow packets to our solicited-node multicast address (for neighbour
        # solicitations).
        # Note that we expect neighbour advertisements to have non-link local
        # source and destination.
        ip6tables -A "out$TAP_IFNAME" -s "$PREFIX" -d "$("$UTILS/solip6" "$IP6ADDR")" -p ipv6-icmp --icmpv6-type neighbour-solicitation -j RETURN
        ip6tables -A "out$TAP_IFNAME" -j REJECT
        #ip6tables -L

        if [ "$GATEWAY6_MAC" ]; then
            ebtables -t nat -A "in$TAP_IFNAME" -d "$GATEWAY6_MAC" -j mark --mark-or "$MARK_GATEWAY6" --mark-target CONTINUE
        fi
    fi

    NOTIFY_PORT="$(config notify_port "$NFDHCPD_BINDING_IN")"
    if [ "$NOTIFY_PORT" ]; then
        if [ "$IPSUB" ]; then
            NOTIFY_IP="$(config notify_ip "$NFDHCPD_BINDING_IN")"
            if [ "$NOTIFY_IP" ]; then
                iptables -t mangle -A "in$TAP_IFNAME" -p udp -d "$NOTIFY_IP" --dport "$NOTIFY_PORT" -j NFQUEUE --queue-num "$NOTIFY_QUEUE"
                iptables -t mangle -A "in$TAP_IFNAME" -p udp --dport "$NOTIFY_PORT" -j DROP
                iptables -t mangle -A "in$TAP_IFNAME" -p tcp --dport "$NOTIFY_PORT" -j DROP
                iptables -I "out$TAP_IFNAME" -p udp --dport "$NOTIFY_PORT" -j REJECT
                iptables -I "out$TAP_IFNAME" -p tcp --dport "$NOTIFY_PORT" -j REJECT
                ebtables -t nat -A "in$TAP_IFNAME" -p arp --arp-opcode request --arp-ip-dst "$NOTIFY_IP" -j arpreply --arpreply-mac "$MACADDR"
            fi
        fi
        if [ "$PREFIX" ]; then
            NOTIFY_IP6="$(config notify_ip6 "$NFDHCPD_BINDING_IN")"
            if [ "$NOTIFY_IP6" ]; then
                ip6tables -t mangle -A "in$TAP_IFNAME" -p udp -d "$NOTIFY_IP6" --dport "$NOTIFY_PORT" -j NFQUEUE --queue-num "$NOTIFY6_QUEUE"
                ip6tables -t mangle -A "in$TAP_IFNAME" -p udp --dport "$NOTIFY_PORT" -j DROP
                ip6tables -t mangle -A "in$TAP_IFNAME" -p tcp --dport "$NOTIFY_PORT" -j DROP
                ip6tables -I "out$TAP_IFNAME" -p udp --dport "$NOTIFY_PORT" -j REJECT
                ip6tables -I "out$TAP_IFNAME" -p tcp --dport "$NOTIFY_PORT" -j REJECT
            fi
        fi
    fi

    #ebtables -I FORWARD --log
    ebtables -N "in$TAP_IFNAME" -P DROP
    ebtables -A FORWARD -i "$TAP_IFNAME" -j "in$TAP_IFNAME"
    # Stop any packets not from allocated MAC address
    ebtables -A "in$TAP_IFNAME" -s ! "$MACADDR" -j DROP
    if [ "$IPSUB" ]; then
        # Allow ARP packets from this IP address to subnet
        ebtables -A "in$TAP_IFNAME" -p arp --arp-ip-src "$IPADDR" --arp-ip-dst "$SUBNET" -j RETURN
        # Allow IPv4
        ebtables -A "in$TAP_IFNAME" -p ipv4 -j RETURN
    fi
    if [ "$PREFIX" ]; then
        # Allow IPv6
        ebtables -A "in$TAP_IFNAME" -p ipv6 -j RETURN
    fi

    ebtables -N "out$TAP_IFNAME" -P DROP
    ebtables -A FORWARD -o "$TAP_IFNAME" -j "out$TAP_IFNAME"
    if [ "$IPSUB" ]; then
        # Allow ARP requests for this IP address from subnet
        ebtables -A "out$TAP_IFNAME" -p arp --arp-opcode request --arp-ip-src "$SUBNET" --arp-ip-dst "$IPADDR" -j RETURN
        # Allow IPv4 multicast 
        for addr in "${MULTI4[@]}"; do
            ebtables -A "out$TAP_IFNAME" -d "$("$UTILS/mcmac4" "$addr")" -j RETURN
        done
    fi
    if [ "$PREFIX" ]; then
        # Allow solicited-node multicast requests
        ebtables -A "out$TAP_IFNAME" -d "$("$UTILS/solmac" "$IP6ADDR")" -j RETURN
        # Allow IPv6 multicast 
        for addr in "${MULTI6[@]}"; do
            ebtables -A "out$TAP_IFNAME" -d "$("$UTILS/mcmac6" "$addr")" -j RETURN
        done
    fi
    # Stop any packets not for allocated MAC address
    ebtables -A "out$TAP_IFNAME" -d ! "$MACADDR" -j DROP
    if [ "$IPSUB" ]; then
        # Allow ARP replies to this IP address but only from subnet
        ebtables -A "out$TAP_IFNAME" -p arp --arp-opcode reply --arp-ip-src "$SUBNET" --arp-ip-dst "$IPADDR" -j RETURN
        # Allow IPv4
        ebtables -A "out$TAP_IFNAME" -p ipv4 -j RETURN
    fi
    if [ "$PREFIX" ]; then
        # Allow IPv6
        ebtables -A "out$TAP_IFNAME" -p ipv6 -j RETURN
    fi
    #ebtables -L
}

untap() {
    if ip link show dev "$TAP_IFNAME" >& /dev/null; then
        ip link del dev "$TAP_IFNAME"
    fi
}

tap() {
    ip tuntap add dev "$TAP_IFNAME" mode tap
    ip link set dev "$TAP_IFNAME" mtu "$MTU"
    ip link set dev "$TAP_IFNAME" master "$BRIDGE"
    ip link set dev "$TAP_IFNAME" up
}

cleanup() {
    trap - EXIT
    untap; unrule
    rm -f "$NFDHCPD_BINDING_OUT"
    [ "$RDISCD_IMG_FILE" ] && run_prog rm -f "$RDISCD_IMG_FILE"
}

trap cleanup EXIT # bash calls cleanup when exiting due to signals too

unrule; rule
untap; tap

( echo "MAC=$MACADDR"
  [ "$IPADDR" ] && echo "IP=$IPADDR"
  [ "$SUBNET" ] && echo "SUBNET=$SUBNET"
  [ "$PREFIX" ] && echo "SUBNET6=$PREFIX"
  [ "$IP6ADDR" ] && echo "IP6=$IP6ADDR"
  echo "BRIDGE=$BRIDGE"
  echo "MTU=$MTU"
  cat "$NFDHCPD_BINDING_IN" )  > "$NFDHCPD_BINDING_OUT"

args=("${@//_rdiscd_img_file_/$RDISCD_IMG_FILE}")

case "$COMMAND" in
    kvm)
        run_prog kvm -netdev "tap,id=hn0,ifname=$TAP_IFNAME,script=no,downscript=no" -device "virtio-net-pci,netdev=hn0,id=nic1,mac=$MACADDR" "${args[@]}"
        ;;
    capstan)
        run_prog capstan run -n tap -b "$TAP_IFNAME" --mac "$MACADDR" "${args[@]}"
        ;;
    *)
        echo "Unknown fold command '$COMMAND'" >&2
        usage
        ;;
esac

